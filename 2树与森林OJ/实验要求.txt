/*2、森林与二叉树之间的转换
问题描述：
设计并实现森林与二叉树之间的转换算法。
基本要求：
（1）构造并实现森林的ADT和二叉树ADT，
森林ADT中应包括初始化、插入元素、删除元素，插入边，删除边，转换成二叉树，显示森林等基本操作，
二叉树ADT 中应包括初始化、插入根、插入指定元素的左孩子或右孩子，转换成森林，显示二叉树等基本操作。
（基本操作根据问题需要定义）
（2）森林使用孩子链表表示，二叉树使用二叉链表表示，实现森林和二叉树结构。


题目描述
构造并实现森林的二叉树 ADT 和二叉树 ADT，
森林 ADT 中应包括初始化、插入元素、删除元素，插入边，转换成二叉树，显示森林等基本操作，
二叉 ADT 中应包括初始化、插入根、插入指定元素的左孩子或右孩子，转换成森林，显示二叉树等基本操作。

数据描述
第一行三个数 K, M, N。

K : K \in \{0,1\}K∈{0,1}. 初始化ADT的类型, 0 表示接下来初始化森林, 1 表示初始化二叉树。
M : M \leq 100M≤100. 初始化树的个数, 若 K=0, M 代表森林中树的个数. 若 K=1, M 一定为1。
N : N \leq 5000N≤5000. 初始化结点的个数, 若 K=0, N 表示森林中所有树的结点的数目之和, 若 K=1, N 表示二叉树中结点的个数。
接下来一行有 M 个数, 分别代表初始的根结点, 树中的结点均为正整数。

接下来 N 行, 表示森林、二叉树中的结点信息。

若初始为森林，每行的格式为 A B [nodes], 表示结点 A 拥有 B 个孩子结点, 孩子结点的集合为 nodes, i.e. 1 2 3 4 表示结点 1 拥有 2 个孩子, 分别为结点 3, 4。
若初始为二叉树，每行的格式为 A l r, 表示结点 A 的左孩子是 l, 右孩子是 r, 若是某个孩子不存在, 则其为值为 -1。
接下来一行一个数 Q (Q\leq 100Q≤100), 表示接下来操作的个数。

接下来 Q 行, 每行的格式为 op [op_nums], 表示对当前森林/二叉树的操作, 下面是各种操作的格式:

1 father node 表示为森林中树的结点 father 插入一个孩子结点 node ，若 father 为 -1 , 表示插入的是孤立结点。 注意同一父亲的孩子从左至右按大小升序保存。
2 father node 表示删除森林中的结点 node , 其中 father 是 node 的父亲结点，father 若为 -1 ，代表删除根结点。若待删除的结点 node 有孩子, 则其所有孩子结点在删除后成为新的树, 保留其原有的子树结构。
3 a b 表示在森林中的根结点 a, b 间插入一条边, 其中 a 为 b 结点的父亲。
4 森林、二叉树转换, 若当前为森林，则将森林转为二叉树，若当前为二叉树，则将二叉树转为森林。
当森林转换二叉树时, 将编号最小的根结点作为合并后的根结点, 其余根结点按从小到大合并。二叉树转森林时，无须恢复原有的树结构。
5 pos father node 表示为二叉树的 father 结点插入一个孩子 node , pos 的范围为{0, 1},0 表示插入的是 右孩子 , 1 表示插入的是 左孩子 . 数据保证 father 待插入的位置没有孩子。
6 显示森林/二叉树。显示二叉树时，输出一行二叉树的前序遍历序列的异或值。显示森林时，按森林根大小的顺序升序输出一行森林中各棵树的结点遍历序列的异或值，元素间用空格分隔。


*/